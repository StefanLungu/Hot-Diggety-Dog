// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2");

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId")
                        .IsUnique();

                    b.ToTable("HotDogStands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db520e35-5e38-4409-a61f-3088ebb8d51e"),
                            Address = "Grimmer's Road",
                            OperatorId = new Guid("9abd2665-4a8c-45c0-bad0-f0039b98507d")
                        },
                        new
                        {
                            Id = new Guid("270be32e-bb1b-4a24-a416-e42233c3e122"),
                            Address = "Fieldfare Banks",
                            OperatorId = new Guid("5334bd44-635c-46b1-8c31-d4e89fa47ab1")
                        },
                        new
                        {
                            Id = new Guid("6fa4a929-bd97-424d-aacd-fd6dc95dc4e5"),
                            Address = "Imperial Passage",
                            OperatorId = new Guid("f1681e10-6fd8-46df-b3fc-66114afc355b")
                        },
                        new
                        {
                            Id = new Guid("b23a132c-7702-43a2-8824-47a7b811160b"),
                            Address = "Woodville Square",
                            OperatorId = new Guid("ab790609-5e1e-4a27-b49e-da6c0ef55ed9")
                        });
                });

            modelBuilder.Entity("Domain.Entities.HotDogStandProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StandId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StandId");

                    b.ToTable("HotDogStandProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f62742-2282-482c-9853-fe8bd297a8dd"),
                            ProductId = new Guid("b3e1b27f-3de7-4dcc-883c-3d8cfb250004"),
                            Quantity = 7,
                            StandId = new Guid("db520e35-5e38-4409-a61f-3088ebb8d51e")
                        },
                        new
                        {
                            Id = new Guid("55a1173c-38ea-4fec-8e0a-ea770d2090c7"),
                            ProductId = new Guid("bdb3791b-4552-4fce-a762-579018bbf4b9"),
                            Quantity = 10,
                            StandId = new Guid("db520e35-5e38-4409-a61f-3088ebb8d51e")
                        },
                        new
                        {
                            Id = new Guid("ccdad75d-4c71-4cdb-860d-92f21fe20b9e"),
                            ProductId = new Guid("ae1b6994-d923-4df5-a99f-8c53af5c2564"),
                            Quantity = 13,
                            StandId = new Guid("db520e35-5e38-4409-a61f-3088ebb8d51e")
                        },
                        new
                        {
                            Id = new Guid("d1ee550e-e5e6-46f3-a19d-f289bc74e0e1"),
                            ProductId = new Guid("b3e1b27f-3de7-4dcc-883c-3d8cfb250004"),
                            Quantity = 20,
                            StandId = new Guid("270be32e-bb1b-4a24-a416-e42233c3e122")
                        },
                        new
                        {
                            Id = new Guid("bddb3746-9718-482e-8bc8-b8d03003e3de"),
                            ProductId = new Guid("bdb3791b-4552-4fce-a762-579018bbf4b9"),
                            Quantity = 6,
                            StandId = new Guid("270be32e-bb1b-4a24-a416-e42233c3e122")
                        });
                });

            modelBuilder.Entity("Domain.Entities.InventoryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<uint>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryProducts");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT")
                        .HasColumnName("operator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("timesptamp");

                    b.Property<double>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3e1b27f-3de7-4dcc-883c-3d8cfb250004"),
                            Category = "HotDogs",
                            Description = "Basic hot dog with ketchup/mustard",
                            Name = "Hot Dog",
                            Price = 10f
                        },
                        new
                        {
                            Id = new Guid("bdb3791b-4552-4fce-a762-579018bbf4b9"),
                            Category = "HotDogs",
                            Description = "Hot dog with caramelized onions and ketchup",
                            Name = "Hot Onion Dog",
                            Price = 12.5f
                        },
                        new
                        {
                            Id = new Guid("ae1b6994-d923-4df5-a99f-8c53af5c2564"),
                            Category = "HotDogs",
                            Description = "Hot dog with melted gouda cheese and bacon",
                            Name = "Bacon Melt",
                            Price = 15f
                        },
                        new
                        {
                            Id = new Guid("00b00302-3a26-432d-9d5d-2d33eb52ee36"),
                            Category = "Extras",
                            Description = "Regular fries",
                            Name = "Fries",
                            Price = 7.5f
                        },
                        new
                        {
                            Id = new Guid("ad8ff4e2-0cb5-435a-bbc2-273ddf400f5a"),
                            Category = "Drinks",
                            Description = "Coke bottle",
                            Name = "Coke",
                            Price = 5f
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProductRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductsRequestId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductsRequestId");

                    b.ToTable("ProductRequests");
                });

            modelBuilder.Entity("Domain.Entities.ProductsRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("ProductsRequests");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f41eea2-34f2-46ab-94b8-39197f82f4f4"),
                            Email = "customer@gmail.com",
                            Password = "B6C45863875E34487CA3C155ED145EFE12A74581E27BEFEC5AA661B8EE8CA6DD",
                            Role = 0,
                            Username = "customer"
                        },
                        new
                        {
                            Id = new Guid("892c2469-e8b4-44d6-95ed-3414650ff8c7"),
                            Email = "admin@gmail.com",
                            Password = "8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918",
                            Role = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("1cd11438-8cab-49c5-8b96-b8f2fe969aee"),
                            Email = "supplier@gmail.com",
                            Password = "955ED10B73D6265B1ADCF768B94F8DD5D91F33309DB94B6B3AF4EFA822F1D9AF",
                            Role = 2,
                            Username = "supplier"
                        },
                        new
                        {
                            Id = new Guid("9abd2665-4a8c-45c0-bad0-f0039b98507d"),
                            Email = "operator1@gmail.com",
                            Password = "941E65AF88E0945C9F7DB5C306B0EF0FC5763DF6BFC9D339FF235195885083A2",
                            Role = 1,
                            Username = "operator1"
                        },
                        new
                        {
                            Id = new Guid("5334bd44-635c-46b1-8c31-d4e89fa47ab1"),
                            Email = "operator2@gmail.com",
                            Password = "6EED3508EEE654F48CC4D57910EAD9310E4B2B386248D56BD40BBF16FCD9A77F",
                            Role = 1,
                            Username = "operator2"
                        },
                        new
                        {
                            Id = new Guid("f1681e10-6fd8-46df-b3fc-66114afc355b"),
                            Email = "operator3@gmail.com",
                            Password = "0A722A639AB7D77124CDD29A0AD96FF421D50DC97A079705C4D5B2D97CF347B0",
                            Role = 1,
                            Username = "operator3"
                        },
                        new
                        {
                            Id = new Guid("ab790609-5e1e-4a27-b49e-da6c0ef55ed9"),
                            Email = "operator4@gmail.com",
                            Password = "D71C5645CC3D232BCBD657888C4FF6AC0C6E33E2B89FB2162F8D96F276E8623A",
                            Role = 1,
                            Username = "operator4"
                        });
                });

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.HasOne("Domain.Entities.User", "Operator")
                        .WithOne("Stand")
                        .HasForeignKey("Domain.Entities.HotDogStand", "OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Entities.HotDogStandProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HotDogStand", "Stand")
                        .WithMany("StandProducts")
                        .HasForeignKey("StandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Stand");
                });

            modelBuilder.Entity("Domain.Entities.InventoryProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.User", "Operator")
                        .WithMany("OperatorOrders")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ClientOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductRequest", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductsRequest", "ProductsRequest")
                        .WithMany("ProductRequest")
                        .HasForeignKey("ProductsRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductsRequest");
                });

            modelBuilder.Entity("Domain.Entities.ProductsRequest", b =>
                {
                    b.HasOne("Domain.Entities.User", "Operator")
                        .WithMany("OperatorRequests")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Entities.HotDogStand", b =>
                {
                    b.Navigation("StandProducts");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Domain.Entities.ProductsRequest", b =>
                {
                    b.Navigation("ProductRequest");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("OperatorOrders");

                    b.Navigation("OperatorRequests");

                    b.Navigation("Stand");
                });
#pragma warning restore 612, 618
        }
    }
}
